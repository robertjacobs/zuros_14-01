/* Auto-generated by genmsg_cpp for file /home/robot/git/zuros/zuros_control/msg/motorMSG.msg */
#ifndef ZUROS_CONTROL_MESSAGE_MOTORMSG_H
#define ZUROS_CONTROL_MESSAGE_MOTORMSG_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace zuros_control
{
template <class ContainerAllocator>
struct motorMSG_ {
  typedef motorMSG_<ContainerAllocator> Type;

  motorMSG_()
  : id(0)
  , mode()
  , accel(0)
  , speed(0)
  {
  }

  motorMSG_(const ContainerAllocator& _alloc)
  : id(0)
  , mode(_alloc)
  , accel(0)
  , speed(0)
  {
  }

  typedef int32_t _id_type;
  int32_t id;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _mode_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  mode;

  typedef int32_t _accel_type;
  int32_t accel;

  typedef int32_t _speed_type;
  int32_t speed;


  typedef boost::shared_ptr< ::zuros_control::motorMSG_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::zuros_control::motorMSG_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct motorMSG
typedef  ::zuros_control::motorMSG_<std::allocator<void> > motorMSG;

typedef boost::shared_ptr< ::zuros_control::motorMSG> motorMSGPtr;
typedef boost::shared_ptr< ::zuros_control::motorMSG const> motorMSGConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::zuros_control::motorMSG_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::zuros_control::motorMSG_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace zuros_control

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::zuros_control::motorMSG_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::zuros_control::motorMSG_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::zuros_control::motorMSG_<ContainerAllocator> > {
  static const char* value() 
  {
    return "2b842696bf7d178aec69e2f08b9dd853";
  }

  static const char* value(const  ::zuros_control::motorMSG_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x2b842696bf7d178aULL;
  static const uint64_t static_value2 = 0xec69e2f08b9dd853ULL;
};

template<class ContainerAllocator>
struct DataType< ::zuros_control::motorMSG_<ContainerAllocator> > {
  static const char* value() 
  {
    return "zuros_control/motorMSG";
  }

  static const char* value(const  ::zuros_control::motorMSG_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::zuros_control::motorMSG_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int32 id\n\
string mode\n\
int32 accel\n\
int32 speed\n\
\n\
";
  }

  static const char* value(const  ::zuros_control::motorMSG_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::zuros_control::motorMSG_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.id);
    stream.next(m.mode);
    stream.next(m.accel);
    stream.next(m.speed);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct motorMSG_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::zuros_control::motorMSG_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::zuros_control::motorMSG_<ContainerAllocator> & v) 
  {
    s << indent << "id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.id);
    s << indent << "mode: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.mode);
    s << indent << "accel: ";
    Printer<int32_t>::stream(s, indent + "  ", v.accel);
    s << indent << "speed: ";
    Printer<int32_t>::stream(s, indent + "  ", v.speed);
  }
};


} // namespace message_operations
} // namespace ros

#endif // ZUROS_CONTROL_MESSAGE_MOTORMSG_H

