/* Auto-generated by genmsg_cpp for file /home/robot/git/zuros/zuros_sensors/msg/MSG_ZWAVE_STATUS.msg */
#ifndef ZUROS_SENSORS_MESSAGE_MSG_ZWAVE_STATUS_H
#define ZUROS_SENSORS_MESSAGE_MSG_ZWAVE_STATUS_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace zuros_sensors
{
template <class ContainerAllocator>
struct MSG_ZWAVE_STATUS_ {
  typedef MSG_ZWAVE_STATUS_<ContainerAllocator> Type;

  MSG_ZWAVE_STATUS_()
  : name()
  , communication_id()
  , value()
  {
  }

  MSG_ZWAVE_STATUS_(const ContainerAllocator& _alloc)
  : name(_alloc)
  , communication_id(_alloc)
  , value(_alloc)
  {
  }

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _name_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  name;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _communication_id_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  communication_id;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _value_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  value;


  typedef boost::shared_ptr< ::zuros_sensors::MSG_ZWAVE_STATUS_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::zuros_sensors::MSG_ZWAVE_STATUS_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct MSG_ZWAVE_STATUS
typedef  ::zuros_sensors::MSG_ZWAVE_STATUS_<std::allocator<void> > MSG_ZWAVE_STATUS;

typedef boost::shared_ptr< ::zuros_sensors::MSG_ZWAVE_STATUS> MSG_ZWAVE_STATUSPtr;
typedef boost::shared_ptr< ::zuros_sensors::MSG_ZWAVE_STATUS const> MSG_ZWAVE_STATUSConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::zuros_sensors::MSG_ZWAVE_STATUS_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::zuros_sensors::MSG_ZWAVE_STATUS_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace zuros_sensors

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::zuros_sensors::MSG_ZWAVE_STATUS_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::zuros_sensors::MSG_ZWAVE_STATUS_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::zuros_sensors::MSG_ZWAVE_STATUS_<ContainerAllocator> > {
  static const char* value() 
  {
    return "795e66ef3e1f1ec8b6e126177b5aefce";
  }

  static const char* value(const  ::zuros_sensors::MSG_ZWAVE_STATUS_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x795e66ef3e1f1ec8ULL;
  static const uint64_t static_value2 = 0xb6e126177b5aefceULL;
};

template<class ContainerAllocator>
struct DataType< ::zuros_sensors::MSG_ZWAVE_STATUS_<ContainerAllocator> > {
  static const char* value() 
  {
    return "zuros_sensors/MSG_ZWAVE_STATUS";
  }

  static const char* value(const  ::zuros_sensors::MSG_ZWAVE_STATUS_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::zuros_sensors::MSG_ZWAVE_STATUS_<ContainerAllocator> > {
  static const char* value() 
  {
    return "string name\n\
string communication_id\n\
string value\n\
\n\
";
  }

  static const char* value(const  ::zuros_sensors::MSG_ZWAVE_STATUS_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::zuros_sensors::MSG_ZWAVE_STATUS_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.name);
    stream.next(m.communication_id);
    stream.next(m.value);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct MSG_ZWAVE_STATUS_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::zuros_sensors::MSG_ZWAVE_STATUS_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::zuros_sensors::MSG_ZWAVE_STATUS_<ContainerAllocator> & v) 
  {
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.name);
    s << indent << "communication_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.communication_id);
    s << indent << "value: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.value);
  }
};


} // namespace message_operations
} // namespace ros

#endif // ZUROS_SENSORS_MESSAGE_MSG_ZWAVE_STATUS_H

